   1               		.file	"Arduino-joystick.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.SetupHardware,"ax",@progbits
  11               	.global	SetupHardware
  13               	SetupHardware:
  14               	.LFB87:
  15               		.file 1 "Arduino-joystick.c"
   1:Arduino-joystick.c **** /*
   2:Arduino-joystick.c ****              LUFA Library
   3:Arduino-joystick.c ****      Copyright (C) Dean Camera, 2010.
   4:Arduino-joystick.c **** 
   5:Arduino-joystick.c ****   dean [at] fourwalledcubicle [dot] com
   6:Arduino-joystick.c ****       www.fourwalledcubicle.com
   7:Arduino-joystick.c **** */
   8:Arduino-joystick.c **** 
   9:Arduino-joystick.c **** /*
  10:Arduino-joystick.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Arduino-joystick.c **** 
  12:Arduino-joystick.c ****   Permission to use, copy, modify, distribute, and sell this
  13:Arduino-joystick.c ****   software and its documentation for any purpose is hereby granted
  14:Arduino-joystick.c ****   without fee, provided that the above copyright notice appear in
  15:Arduino-joystick.c ****   all copies and that both that the copyright notice and this
  16:Arduino-joystick.c ****   permission notice and warranty disclaimer appear in supporting
  17:Arduino-joystick.c ****   documentation, and that the name of the author not be used in
  18:Arduino-joystick.c ****   advertising or publicity pertaining to distribution of the
  19:Arduino-joystick.c ****   software without specific, written prior permission.
  20:Arduino-joystick.c **** 
  21:Arduino-joystick.c ****   The author disclaim all warranties with regard to this
  22:Arduino-joystick.c ****   software, including all implied warranties of merchantability
  23:Arduino-joystick.c ****   and fitness.  In no event shall the author be liable for any
  24:Arduino-joystick.c ****   special, indirect or consequential damages or any damages
  25:Arduino-joystick.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Arduino-joystick.c ****   in an action of contract, negligence or other tortious action,
  27:Arduino-joystick.c ****   arising out of or in connection with the use or performance of
  28:Arduino-joystick.c ****   this software.
  29:Arduino-joystick.c **** */
  30:Arduino-joystick.c **** 
  31:Arduino-joystick.c **** /*-
  32:Arduino-joystick.c ****  * Copyright (c) 2011 Darran Hunt (darran [at] hunt dot net dot nz)
  33:Arduino-joystick.c ****  * All rights reserved.
  34:Arduino-joystick.c ****  *
  35:Arduino-joystick.c ****  * Redistribution and use in source and binary forms, with or without
  36:Arduino-joystick.c ****  * modification, are permitted provided that the following conditions
  37:Arduino-joystick.c ****  * are met:
  38:Arduino-joystick.c ****  * 1. Redistributions of source code must retain the above copyright
  39:Arduino-joystick.c ****  *    notice, this list of conditions and the following disclaimer.
  40:Arduino-joystick.c ****  * 2. Redistributions in binary form must reproduce the above copyright
  41:Arduino-joystick.c ****  *    notice, this list of conditions and the following disclaimer in the
  42:Arduino-joystick.c ****  *    documentation and/or other materials provided with the distribution.
  43:Arduino-joystick.c ****  *
  44:Arduino-joystick.c ****  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
  45:Arduino-joystick.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
  46:Arduino-joystick.c ****  * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
  47:Arduino-joystick.c ****  * THE CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  48:Arduino-joystick.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  49:Arduino-joystick.c ****  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
  50:Arduino-joystick.c ****  * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  51:Arduino-joystick.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
  52:Arduino-joystick.c ****  * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
  53:Arduino-joystick.c ****  * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  54:Arduino-joystick.c ****  */
  55:Arduino-joystick.c **** 
  56:Arduino-joystick.c **** /** \file
  57:Arduino-joystick.c ****  *
  58:Arduino-joystick.c ****  *  Main source file for the Arduino-mouse project. This file contains the main tasks of
  59:Arduino-joystick.c ****  *  the project and is responsible for the initial application hardware configuration.
  60:Arduino-joystick.c ****  */
  61:Arduino-joystick.c **** 
  62:Arduino-joystick.c **** #include "Arduino-joystick.h"
  63:Arduino-joystick.c **** 
  64:Arduino-joystick.c **** /** Buffer to hold the previously generated HID report, for comparison purposes inside the HID clas
  65:Arduino-joystick.c **** uint8_t PrevJoystickHIDReportBuffer[sizeof(USB_JoystickReport_Data_t)];
  66:Arduino-joystick.c **** 
  67:Arduino-joystick.c **** /** LUFA HID Class driver interface configuration and state information. This structure is
  68:Arduino-joystick.c ****  *  passed to all HID Class driver functions, so that multiple instances of the same class
  69:Arduino-joystick.c ****  *  within a device can be differentiated from one another.
  70:Arduino-joystick.c ****  */
  71:Arduino-joystick.c **** USB_ClassInfo_HID_Device_t Joystick_HID_Interface = {
  72:Arduino-joystick.c ****     .Config = {
  73:Arduino-joystick.c **** 	.InterfaceNumber              = 0,
  74:Arduino-joystick.c **** 
  75:Arduino-joystick.c **** 	.ReportINEndpointNumber       = JOYSTICK_EPNUM,
  76:Arduino-joystick.c **** 	.ReportINEndpointSize         = JOYSTICK_EPSIZE,
  77:Arduino-joystick.c **** 	.ReportINEndpointDoubleBank   = false,
  78:Arduino-joystick.c **** 
  79:Arduino-joystick.c **** 	.PrevReportINBuffer           = PrevJoystickHIDReportBuffer,
  80:Arduino-joystick.c **** 	.PrevReportINBufferSize       = sizeof(PrevJoystickHIDReportBuffer),
  81:Arduino-joystick.c ****     },
  82:Arduino-joystick.c **** };
  83:Arduino-joystick.c **** 
  84:Arduino-joystick.c **** 
  85:Arduino-joystick.c **** /** Main program entry point. This routine contains the overall program flow, including initial
  86:Arduino-joystick.c ****  *  setup of all components and the main program loop.
  87:Arduino-joystick.c ****  */
  88:Arduino-joystick.c **** 
  89:Arduino-joystick.c **** /** Circular buffer to hold data from the serial port before it is sent to the host. */
  90:Arduino-joystick.c **** RingBuff_t USARTtoUSB_Buffer;
  91:Arduino-joystick.c **** 
  92:Arduino-joystick.c **** USB_JoystickReport_Data_t joyReport = { {0, 0, 0, 0}};//, 0, 0, 0, 0, 0}};//, {0, 0, 0, 0, 0} };
  93:Arduino-joystick.c **** 
  94:Arduino-joystick.c **** #define LED_ON_TICKS 2000	/* Number of ticks to leave LEDs on */
  95:Arduino-joystick.c **** volatile int led1_ticks = 0;
  96:Arduino-joystick.c **** 
  97:Arduino-joystick.c **** /** Main program entry point. This routine contains the overall program flow, including initial
  98:Arduino-joystick.c ****  *  setup of all components and the main program loop.
  99:Arduino-joystick.c ****  */
 100:Arduino-joystick.c **** int main(void)
 101:Arduino-joystick.c **** {
 102:Arduino-joystick.c ****     SetupHardware();
 103:Arduino-joystick.c **** 
 104:Arduino-joystick.c ****     RingBuffer_InitBuffer(&USARTtoUSB_Buffer);
 105:Arduino-joystick.c **** 
 106:Arduino-joystick.c ****     sei();
 107:Arduino-joystick.c **** 
 108:Arduino-joystick.c ****     for (;;) {
 109:Arduino-joystick.c **** 	HID_Device_USBTask(&Joystick_HID_Interface);
 110:Arduino-joystick.c **** 	USB_USBTask();
 111:Arduino-joystick.c **** 
 112:Arduino-joystick.c **** 	/* Turn off the Tx LED when the tick count reaches zero */
 113:Arduino-joystick.c **** 	if (led1_ticks) {
 114:Arduino-joystick.c **** 	    led1_ticks--;
 115:Arduino-joystick.c **** 	    if (led1_ticks == 0) {
 116:Arduino-joystick.c **** 		LEDs_TurnOffLEDs(LEDS_LED1);
 117:Arduino-joystick.c **** 	    }
 118:Arduino-joystick.c **** 	}
 119:Arduino-joystick.c ****     }
 120:Arduino-joystick.c **** }
 121:Arduino-joystick.c **** 
 122:Arduino-joystick.c **** /** Configures the board hardware and chip peripherals for the demo's functionality. */
 123:Arduino-joystick.c **** void SetupHardware(void)
 124:Arduino-joystick.c **** {
  16               		.loc 1 124 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
 125:Arduino-joystick.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 126:Arduino-joystick.c ****     MCUSR &= ~(1 << WDRF);
  30               		.loc 1 126 0
  31 0004 84B7      		in r24,0x34
  32 0006 877F      		andi r24,lo8(-9)
  33 0008 84BF      		out 0x34,r24
 127:Arduino-joystick.c ****     wdt_disable();
  34               		.loc 1 127 0
  35 000a 88E1      		ldi r24,lo8(24)
  36               	/* #APP */
  37               	 ;  127 "Arduino-joystick.c" 1
  38 000c 0FB6      		in __tmp_reg__, __SREG__
  39 000e F894      		cli
  40 0010 8093 6000 		sts 96, r24
  41 0014 1092 6000 		sts 96, __zero_reg__
  42 0018 0FBE      		out __SREG__,__tmp_reg__
  43               		
  44               	 ;  0 "" 2
  45               	.LVL0:
  46               	/* #NOAPP */
  47               	.LBB50:
  48               	.LBB51:
  49               		.file 2 "../../LUFA/Drivers/Peripheral/Serial.h"
   1:../../LUFA/Drivers/Peripheral/Serial.h **** /*
   2:../../LUFA/Drivers/Peripheral/Serial.h ****              LUFA Library
   3:../../LUFA/Drivers/Peripheral/Serial.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/Peripheral/Serial.h ****               
   5:../../LUFA/Drivers/Peripheral/Serial.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/Peripheral/Serial.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/Peripheral/Serial.h **** */
   8:../../LUFA/Drivers/Peripheral/Serial.h **** 
   9:../../LUFA/Drivers/Peripheral/Serial.h **** /*
  10:../../LUFA/Drivers/Peripheral/Serial.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/Peripheral/Serial.h **** 
  12:../../LUFA/Drivers/Peripheral/Serial.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../LUFA/Drivers/Peripheral/Serial.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/Peripheral/Serial.h ****   without fee, provided that the above copyright notice appear in 
  15:../../LUFA/Drivers/Peripheral/Serial.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/Peripheral/Serial.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../../LUFA/Drivers/Peripheral/Serial.h ****   documentation, and that the name of the author not be used in 
  18:../../LUFA/Drivers/Peripheral/Serial.h ****   advertising or publicity pertaining to distribution of the 
  19:../../LUFA/Drivers/Peripheral/Serial.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/Peripheral/Serial.h **** 
  21:../../LUFA/Drivers/Peripheral/Serial.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/Peripheral/Serial.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/Peripheral/Serial.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/Peripheral/Serial.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/Peripheral/Serial.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/Peripheral/Serial.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/Peripheral/Serial.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/Peripheral/Serial.h ****   this software.
  29:../../LUFA/Drivers/Peripheral/Serial.h **** */
  30:../../LUFA/Drivers/Peripheral/Serial.h **** 
  31:../../LUFA/Drivers/Peripheral/Serial.h **** /** \file
  32:../../LUFA/Drivers/Peripheral/Serial.h ****  *  \brief Master include file for the USART peripheral driver.
  33:../../LUFA/Drivers/Peripheral/Serial.h ****  *
  34:../../LUFA/Drivers/Peripheral/Serial.h ****  *  Driver for the USART subsystem on supported USB AVRs.
  35:../../LUFA/Drivers/Peripheral/Serial.h ****  */
  36:../../LUFA/Drivers/Peripheral/Serial.h ****  
  37:../../LUFA/Drivers/Peripheral/Serial.h **** /** \ingroup Group_PeripheralDrivers
  38:../../LUFA/Drivers/Peripheral/Serial.h ****  *  @defgroup Group_Serial Serial USART Driver - LUFA/Drivers/Peripheral/Serial.h
  39:../../LUFA/Drivers/Peripheral/Serial.h ****  *
  40:../../LUFA/Drivers/Peripheral/Serial.h ****  *  \section Sec_Dependencies Module Source Dependencies
  41:../../LUFA/Drivers/Peripheral/Serial.h ****  *  The following files must be built with any user project that uses this module:
  42:../../LUFA/Drivers/Peripheral/Serial.h ****  *    - LUFA/Drivers/Peripheral/Serial.c <i>(Makefile source module name: LUFA_SRC_SERIAL)</i>
  43:../../LUFA/Drivers/Peripheral/Serial.h ****  *
  44:../../LUFA/Drivers/Peripheral/Serial.h ****  *  \section Module Description
  45:../../LUFA/Drivers/Peripheral/Serial.h ****  *  Hardware serial USART driver. This module provides an easy to use driver for
  46:../../LUFA/Drivers/Peripheral/Serial.h ****  *  the setup of and transfer of data over the AVR's USART port.
  47:../../LUFA/Drivers/Peripheral/Serial.h ****  *
  48:../../LUFA/Drivers/Peripheral/Serial.h ****  *  @{
  49:../../LUFA/Drivers/Peripheral/Serial.h ****  */
  50:../../LUFA/Drivers/Peripheral/Serial.h ****  
  51:../../LUFA/Drivers/Peripheral/Serial.h **** #ifndef __SERIAL_H__
  52:../../LUFA/Drivers/Peripheral/Serial.h **** #define __SERIAL_H__
  53:../../LUFA/Drivers/Peripheral/Serial.h **** 
  54:../../LUFA/Drivers/Peripheral/Serial.h **** 	/* Includes: */
  55:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include <avr/io.h>
  56:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include <avr/pgmspace.h>
  57:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include <stdbool.h>
  58:../../LUFA/Drivers/Peripheral/Serial.h **** 		
  59:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include "../../Common/Common.h"
  60:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include "../Misc/TerminalCodes.h"
  61:../../LUFA/Drivers/Peripheral/Serial.h **** 
  62:../../LUFA/Drivers/Peripheral/Serial.h **** 	/* Enable C linkage for C++ Compilers: */
  63:../../LUFA/Drivers/Peripheral/Serial.h **** 		#if defined(__cplusplus)
  64:../../LUFA/Drivers/Peripheral/Serial.h **** 			extern "C" {
  65:../../LUFA/Drivers/Peripheral/Serial.h **** 		#endif
  66:../../LUFA/Drivers/Peripheral/Serial.h **** 
  67:../../LUFA/Drivers/Peripheral/Serial.h **** 	/* Public Interface - May be used in end-application: */
  68:../../LUFA/Drivers/Peripheral/Serial.h **** 		/* Macros: */
  69:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Macro for calculating the baud value from a given baud rate when the U2X (double speed) bit 
  70:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  not set.
  71:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  72:../../LUFA/Drivers/Peripheral/Serial.h **** 			#define SERIAL_UBBRVAL(baud)    ((((F_CPU / 16) + (baud / 2)) / (baud)) - 1)
  73:../../LUFA/Drivers/Peripheral/Serial.h **** 
  74:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Macro for calculating the baud value from a given baud rate when the U2X (double speed) bit 
  75:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  set.
  76:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  77:../../LUFA/Drivers/Peripheral/Serial.h **** 			#define SERIAL_2X_UBBRVAL(baud) ((((F_CPU / 8) + (baud / 2)) / (baud)) - 1)
  78:../../LUFA/Drivers/Peripheral/Serial.h **** 
  79:../../LUFA/Drivers/Peripheral/Serial.h **** 		/* Function Prototypes: */
  80:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Transmits a given string located in program space (FLASH) through the USART.
  81:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *
  82:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] FlashStringPtr  Pointer to a string located in program space.
  83:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  84:../../LUFA/Drivers/Peripheral/Serial.h **** 			void Serial_TxString_P(const char* FlashStringPtr) ATTR_NON_NULL_PTR_ARG(1);
  85:../../LUFA/Drivers/Peripheral/Serial.h **** 
  86:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Transmits a given string located in SRAM memory through the USART.
  87:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *
  88:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] StringPtr  Pointer to a string located in SRAM space.
  89:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  90:../../LUFA/Drivers/Peripheral/Serial.h **** 			void Serial_TxString(const char* StringPtr) ATTR_NON_NULL_PTR_ARG(1);
  91:../../LUFA/Drivers/Peripheral/Serial.h **** 
  92:../../LUFA/Drivers/Peripheral/Serial.h **** 		/* Inline Functions: */
  93:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Initializes the USART, ready for serial data transmission and reception. This initializes th
  94:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  standard 8-bit, no parity, 1 stop bit settings suitable for most applications.
  95:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *
  96:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] BaudRate     Serial baud rate, in bits per second.
  97:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to doubl
  98:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  99:../../LUFA/Drivers/Peripheral/Serial.h **** 			static inline void Serial_Init(const uint32_t BaudRate,
 100:../../LUFA/Drivers/Peripheral/Serial.h **** 			                               const bool DoubleSpeed)
 101:../../LUFA/Drivers/Peripheral/Serial.h **** 			{
 102:../../LUFA/Drivers/Peripheral/Serial.h **** 				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
  50               		.loc 2 102 0
  51 001a 20E1      		ldi r18,lo8(16)
  52 001c 30E0      		ldi r19,0
  53 001e 3093 CD00 		sts 204+1,r19
  54 0022 2093 CC00 		sts 204,r18
 103:../../LUFA/Drivers/Peripheral/Serial.h **** 
 104:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
  55               		.loc 2 104 0
  56 0026 96E0      		ldi r25,lo8(6)
  57 0028 9093 CA00 		sts 202,r25
 105:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
  58               		.loc 2 105 0
  59 002c 92E0      		ldi r25,lo8(2)
  60 002e 9093 C800 		sts 200,r25
 106:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
  61               		.loc 2 106 0
  62 0032 C9EC      		ldi r28,lo8(-55)
  63 0034 D0E0      		ldi r29,0
  64 0036 8883      		st Y,r24
 107:../../LUFA/Drivers/Peripheral/Serial.h **** 				
 108:../../LUFA/Drivers/Peripheral/Serial.h **** 				DDRD  |= (1 << 3);
  65               		.loc 2 108 0
  66 0038 539A      		sbi 0xa,3
 109:../../LUFA/Drivers/Peripheral/Serial.h **** 				PORTD |= (1 << 2);
  67               		.loc 2 109 0
  68 003a 5A9A      		sbi 0xb,2
  69               	.LBE51:
  70               	.LBE50:
  71               	.LBB52:
  72               	.LBB53:
  73               		.file 3 "./Board/LEDs.h"
   1:./Board/LEDs.h **** /*
   2:./Board/LEDs.h ****              LUFA Library
   3:./Board/LEDs.h ****      Copyright (C) Dean Camera, 2010.
   4:./Board/LEDs.h ****               
   5:./Board/LEDs.h ****   dean [at] fourwalledcubicle [dot] com
   6:./Board/LEDs.h ****       www.fourwalledcubicle.com
   7:./Board/LEDs.h **** */
   8:./Board/LEDs.h **** 
   9:./Board/LEDs.h **** /*
  10:./Board/LEDs.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./Board/LEDs.h **** 
  12:./Board/LEDs.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:./Board/LEDs.h ****   software and its documentation for any purpose is hereby granted
  14:./Board/LEDs.h ****   without fee, provided that the above copyright notice appear in 
  15:./Board/LEDs.h ****   all copies and that both that the copyright notice and this
  16:./Board/LEDs.h ****   permission notice and warranty disclaimer appear in supporting 
  17:./Board/LEDs.h ****   documentation, and that the name of the author not be used in 
  18:./Board/LEDs.h ****   advertising or publicity pertaining to distribution of the 
  19:./Board/LEDs.h ****   software without specific, written prior permission.
  20:./Board/LEDs.h **** 
  21:./Board/LEDs.h ****   The author disclaim all warranties with regard to this
  22:./Board/LEDs.h ****   software, including all implied warranties of merchantability
  23:./Board/LEDs.h ****   and fitness.  In no event shall the author be liable for any
  24:./Board/LEDs.h ****   special, indirect or consequential damages or any damages
  25:./Board/LEDs.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./Board/LEDs.h ****   in an action of contract, negligence or other tortious action,
  27:./Board/LEDs.h ****   arising out of or in connection with the use or performance of
  28:./Board/LEDs.h ****   this software.
  29:./Board/LEDs.h **** */
  30:./Board/LEDs.h **** 
  31:./Board/LEDs.h **** /*
  32:./Board/LEDs.h ****    Board LEDs driver for the Benito board, from www.dorkbotpdx.org.
  33:./Board/LEDs.h **** */
  34:./Board/LEDs.h **** 
  35:./Board/LEDs.h **** #ifndef __LEDS_ARDUINOUNO_H__
  36:./Board/LEDs.h **** #define __LEDS_ARDUINOUNO_H__
  37:./Board/LEDs.h **** 
  38:./Board/LEDs.h **** 	/* Includes: */
  39:./Board/LEDs.h **** 		#include <avr/io.h>
  40:./Board/LEDs.h **** 
  41:./Board/LEDs.h **** /* Enable C linkage for C++ Compilers: */
  42:./Board/LEDs.h **** 		#if defined(__cplusplus)
  43:./Board/LEDs.h **** 			extern "C" {
  44:./Board/LEDs.h **** 		#endif
  45:./Board/LEDs.h **** 
  46:./Board/LEDs.h **** 	/* Preprocessor Checks: */
  47:./Board/LEDs.h **** 		#if !defined(INCLUDE_FROM_LEDS_H)
  48:./Board/LEDs.h **** 			#error Do not include this file directly. Include LUFA/Drivers/Board/LEDS.h instead.
  49:./Board/LEDs.h **** 		#endif
  50:./Board/LEDs.h **** 
  51:./Board/LEDs.h **** 	/* Public Interface - May be used in end-application: */
  52:./Board/LEDs.h **** 		/* Macros: */
  53:./Board/LEDs.h **** 			/** LED mask for the first LED on the board. */
  54:./Board/LEDs.h **** 			#define LEDS_LED1        (1 << 5)
  55:./Board/LEDs.h **** 
  56:./Board/LEDs.h **** 			/** LED mask for the second LED on the board. */
  57:./Board/LEDs.h **** 			#define LEDS_LED2        (1 << 4)
  58:./Board/LEDs.h **** 
  59:./Board/LEDs.h **** 			/** LED mask for all the LEDs on the board. */
  60:./Board/LEDs.h **** 			#define LEDS_ALL_LEDS    (LEDS_LED1 | LEDS_LED2)
  61:./Board/LEDs.h **** 
  62:./Board/LEDs.h **** 			/** LED mask for the none of the board LEDs */
  63:./Board/LEDs.h **** 			#define LEDS_NO_LEDS     0
  64:./Board/LEDs.h **** 
  65:./Board/LEDs.h **** 		/* Inline Functions: */
  66:./Board/LEDs.h **** 		#if !defined(__DOXYGEN__)
  67:./Board/LEDs.h **** 			static inline void LEDs_Init(void)
  68:./Board/LEDs.h **** 			{
  69:./Board/LEDs.h **** 				DDRD  |= LEDS_ALL_LEDS;
  74               		.loc 3 69 0
  75 003c 8AB1      		in r24,0xa
  76 003e 8063      		ori r24,lo8(48)
  77 0040 8AB9      		out 0xa,r24
  70:./Board/LEDs.h **** 				PORTD |= LEDS_ALL_LEDS;
  78               		.loc 3 70 0
  79 0042 8BB1      		in r24,0xb
  80 0044 8063      		ori r24,lo8(48)
  81 0046 8BB9      		out 0xb,r24
  82               	.LBE53:
  83               	.LBE52:
 128:Arduino-joystick.c **** 
 129:Arduino-joystick.c ****     /* Hardware Initialization */
 130:Arduino-joystick.c ****     Serial_Init(115200, true);
 131:Arduino-joystick.c ****     LEDs_Init();
 132:Arduino-joystick.c ****     USB_Init();
  84               		.loc 1 132 0
  85 0048 0E94 0000 		call USB_Init
  86               	.LVL1:
 133:Arduino-joystick.c **** 
 134:Arduino-joystick.c ****     UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
  87               		.loc 1 134 0
  88 004c 88E9      		ldi r24,lo8(-104)
  89 004e 8883      		st Y,r24
  90               	/* epilogue start */
 135:Arduino-joystick.c **** }
  91               		.loc 1 135 0
  92 0050 DF91      		pop r29
  93 0052 CF91      		pop r28
  94 0054 0895      		ret
  95               		.cfi_endproc
  96               	.LFE87:
  98               		.section	.text.startup.main,"ax",@progbits
  99               	.global	main
 101               	main:
 102               	.LFB86:
 101:Arduino-joystick.c ****     SetupHardware();
 103               		.loc 1 101 0
 104               		.cfi_startproc
 105               	/* prologue: function */
 106               	/* frame size = 0 */
 107               	/* stack size = 0 */
 108               	.L__stack_usage = 0
 102:Arduino-joystick.c **** 
 109               		.loc 1 102 0
 110 0000 0E94 0000 		call SetupHardware
 111               	.LVL2:
 112               	.LBB63:
 113               	.LBB64:
 114               		.file 4 "Lib/LightweightRingBuff.h"
   1:Lib/LightweightRingBuff.h **** /*
   2:Lib/LightweightRingBuff.h ****              LUFA Library
   3:Lib/LightweightRingBuff.h ****      Copyright (C) Dean Camera, 2010.
   4:Lib/LightweightRingBuff.h ****               
   5:Lib/LightweightRingBuff.h ****   dean [at] fourwalledcubicle [dot] com
   6:Lib/LightweightRingBuff.h ****       www.fourwalledcubicle.com
   7:Lib/LightweightRingBuff.h **** */
   8:Lib/LightweightRingBuff.h **** 
   9:Lib/LightweightRingBuff.h **** /*
  10:Lib/LightweightRingBuff.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Lib/LightweightRingBuff.h **** 
  12:Lib/LightweightRingBuff.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:Lib/LightweightRingBuff.h ****   software and its documentation for any purpose is hereby granted
  14:Lib/LightweightRingBuff.h ****   without fee, provided that the above copyright notice appear in 
  15:Lib/LightweightRingBuff.h ****   all copies and that both that the copyright notice and this
  16:Lib/LightweightRingBuff.h ****   permission notice and warranty disclaimer appear in supporting 
  17:Lib/LightweightRingBuff.h ****   documentation, and that the name of the author not be used in 
  18:Lib/LightweightRingBuff.h ****   advertising or publicity pertaining to distribution of the 
  19:Lib/LightweightRingBuff.h ****   software without specific, written prior permission.
  20:Lib/LightweightRingBuff.h **** 
  21:Lib/LightweightRingBuff.h ****   The author disclaim all warranties with regard to this
  22:Lib/LightweightRingBuff.h ****   software, including all implied warranties of merchantability
  23:Lib/LightweightRingBuff.h ****   and fitness.  In no event shall the author be liable for any
  24:Lib/LightweightRingBuff.h ****   special, indirect or consequential damages or any damages
  25:Lib/LightweightRingBuff.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:Lib/LightweightRingBuff.h ****   in an action of contract, negligence or other tortious action,
  27:Lib/LightweightRingBuff.h ****   arising out of or in connection with the use or performance of
  28:Lib/LightweightRingBuff.h ****   this software.
  29:Lib/LightweightRingBuff.h **** */
  30:Lib/LightweightRingBuff.h **** 
  31:Lib/LightweightRingBuff.h **** /** \file
  32:Lib/LightweightRingBuff.h ****  *
  33:Lib/LightweightRingBuff.h ****  *  Ultra lightweight ring buffer, for fast insertion/deletion.
  34:Lib/LightweightRingBuff.h ****  */
  35:Lib/LightweightRingBuff.h ****  
  36:Lib/LightweightRingBuff.h **** #ifndef _ULW_RING_BUFF_H_
  37:Lib/LightweightRingBuff.h **** #define _ULW_RING_BUFF_H_
  38:Lib/LightweightRingBuff.h **** 
  39:Lib/LightweightRingBuff.h **** 	/* Includes: */
  40:Lib/LightweightRingBuff.h **** 		#include <util/atomic.h>
  41:Lib/LightweightRingBuff.h **** 	
  42:Lib/LightweightRingBuff.h **** 		#include <stdint.h>
  43:Lib/LightweightRingBuff.h **** 		#include <stdbool.h>
  44:Lib/LightweightRingBuff.h **** 
  45:Lib/LightweightRingBuff.h **** 	/* Defines: */
  46:Lib/LightweightRingBuff.h **** 		/** Size of each ring buffer, in data elements - must be between 1 and 255. */
  47:Lib/LightweightRingBuff.h **** 		#define BUFFER_SIZE         128
  48:Lib/LightweightRingBuff.h **** 		
  49:Lib/LightweightRingBuff.h **** 		/** Maximum number of data elements to buffer before forcing a flush. 
  50:Lib/LightweightRingBuff.h **** 		 *  Must be less than BUFFER_SIZE
  51:Lib/LightweightRingBuff.h **** 		 */
  52:Lib/LightweightRingBuff.h **** 		#define BUFFER_NEARLY_FULL	96
  53:Lib/LightweightRingBuff.h **** 		
  54:Lib/LightweightRingBuff.h **** 		/** Type of data to store into the buffer. */
  55:Lib/LightweightRingBuff.h **** 		#define RingBuff_Data_t     uint8_t
  56:Lib/LightweightRingBuff.h **** 
  57:Lib/LightweightRingBuff.h **** 		/** Datatype which may be used to store the count of data stored in a buffer, retrieved
  58:Lib/LightweightRingBuff.h **** 		 *  via a call to \ref RingBuffer_GetCount().
  59:Lib/LightweightRingBuff.h **** 		 */
  60:Lib/LightweightRingBuff.h **** 		#if (BUFFER_SIZE <= 0xFF)
  61:Lib/LightweightRingBuff.h **** 			#define RingBuff_Count_t   uint8_t
  62:Lib/LightweightRingBuff.h **** 		#else
  63:Lib/LightweightRingBuff.h **** 			#define RingBuff_Count_t   uint16_t
  64:Lib/LightweightRingBuff.h **** 		#endif
  65:Lib/LightweightRingBuff.h **** 
  66:Lib/LightweightRingBuff.h **** 	/* Type Defines: */
  67:Lib/LightweightRingBuff.h **** 		/** Type define for a new ring buffer object. Buffers should be initialized via a call to
  68:Lib/LightweightRingBuff.h **** 		 *  \ref RingBuffer_InitBuffer() before use.
  69:Lib/LightweightRingBuff.h **** 		 */
  70:Lib/LightweightRingBuff.h **** 		typedef struct
  71:Lib/LightweightRingBuff.h **** 		{
  72:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t  Buffer[BUFFER_SIZE]; /**< Internal ring buffer data, referenced by the buffer p
  73:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t* In; /**< Current storage location in the circular buffer */
  74:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t* Out; /**< Current retrieval location in the circular buffer */
  75:Lib/LightweightRingBuff.h **** 			RingBuff_Count_t Count;
  76:Lib/LightweightRingBuff.h **** 		} RingBuff_t;
  77:Lib/LightweightRingBuff.h **** 	
  78:Lib/LightweightRingBuff.h **** 	/* Inline Functions: */
  79:Lib/LightweightRingBuff.h **** 		/** Initializes a ring buffer ready for use. Buffers must be initialized via this function
  80:Lib/LightweightRingBuff.h **** 		 *  before any operations are called upon them. Already initialized buffers may be reset
  81:Lib/LightweightRingBuff.h **** 		 *  by re-initializing them using this function.
  82:Lib/LightweightRingBuff.h **** 		 *
  83:Lib/LightweightRingBuff.h **** 		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
  84:Lib/LightweightRingBuff.h **** 		 */
  85:Lib/LightweightRingBuff.h **** 		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
  86:Lib/LightweightRingBuff.h **** 		{
  87:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 115               		.loc 4 87 0
 116 0004 2FB7      		in r18,__SREG__
 117               	.LVL3:
 118               	.LBB65:
 119               	.LBB66:
 120               		.file 5 "/opt/local/avr/include/util/atomic.h"
   1:/opt/local/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/opt/local/avr/include/util/atomic.h ****    All rights reserved.
   3:/opt/local/avr/include/util/atomic.h **** 
   4:/opt/local/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/opt/local/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/opt/local/avr/include/util/atomic.h **** 
   7:/opt/local/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/opt/local/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/opt/local/avr/include/util/atomic.h **** 
  10:/opt/local/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/opt/local/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/opt/local/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/opt/local/avr/include/util/atomic.h ****      distribution.
  14:/opt/local/avr/include/util/atomic.h **** 
  15:/opt/local/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/opt/local/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/opt/local/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/opt/local/avr/include/util/atomic.h **** 
  19:/opt/local/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/opt/local/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/opt/local/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/opt/local/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/opt/local/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/opt/local/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/opt/local/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/opt/local/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/opt/local/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/opt/local/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/opt/local/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/opt/local/avr/include/util/atomic.h **** */
  31:/opt/local/avr/include/util/atomic.h **** 
  32:/opt/local/avr/include/util/atomic.h **** /* $Id: atomic.h 2158 2010-06-10 15:48:28Z joerg_wunsch $ */
  33:/opt/local/avr/include/util/atomic.h **** 
  34:/opt/local/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/opt/local/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/opt/local/avr/include/util/atomic.h **** 
  37:/opt/local/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/opt/local/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/opt/local/avr/include/util/atomic.h **** 
  40:/opt/local/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/opt/local/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/opt/local/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/opt/local/avr/include/util/atomic.h **** {
  44:/opt/local/avr/include/util/atomic.h ****     sei();
  45:/opt/local/avr/include/util/atomic.h ****     return 1;
  46:/opt/local/avr/include/util/atomic.h **** }
  47:/opt/local/avr/include/util/atomic.h **** 
  48:/opt/local/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/opt/local/avr/include/util/atomic.h **** {
  50:/opt/local/avr/include/util/atomic.h ****     cli();
 121               		.loc 5 50 0
 122               	/* #APP */
 123               	 ;  50 "/opt/local/avr/include/util/atomic.h" 1
 124 0006 F894      		cli
 125               	 ;  0 "" 2
 126               	.LVL4:
 127               	/* #NOAPP */
 128               	.LBE66:
 129               	.LBE65:
  88:Lib/LightweightRingBuff.h **** 			{
  89:Lib/LightweightRingBuff.h **** 				Buffer->In  = Buffer->Buffer;
 130               		.loc 4 89 0
 131 0008 80E0      		ldi r24,lo8(USARTtoUSB_Buffer)
 132 000a 90E0      		ldi r25,hi8(USARTtoUSB_Buffer)
 133 000c 9093 0000 		sts USARTtoUSB_Buffer+128+1,r25
 134 0010 8093 0000 		sts USARTtoUSB_Buffer+128,r24
  90:Lib/LightweightRingBuff.h **** 				Buffer->Out = Buffer->Buffer;
 135               		.loc 4 90 0
 136 0014 9093 0000 		sts USARTtoUSB_Buffer+130+1,r25
 137 0018 8093 0000 		sts USARTtoUSB_Buffer+130,r24
 138               	.LVL5:
 139               	.LBB67:
 140               	.LBB68:
  51:/opt/local/avr/include/util/atomic.h ****     return 1;
  52:/opt/local/avr/include/util/atomic.h **** }
  53:/opt/local/avr/include/util/atomic.h **** 
  54:/opt/local/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/opt/local/avr/include/util/atomic.h **** {
  56:/opt/local/avr/include/util/atomic.h ****     sei();
  57:/opt/local/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:/opt/local/avr/include/util/atomic.h ****     (void)__s;
  59:/opt/local/avr/include/util/atomic.h **** }
  60:/opt/local/avr/include/util/atomic.h **** 
  61:/opt/local/avr/include/util/atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:/opt/local/avr/include/util/atomic.h **** {
  63:/opt/local/avr/include/util/atomic.h ****     cli();
  64:/opt/local/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:/opt/local/avr/include/util/atomic.h ****     (void)__s;
  66:/opt/local/avr/include/util/atomic.h **** }
  67:/opt/local/avr/include/util/atomic.h **** 
  68:/opt/local/avr/include/util/atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:/opt/local/avr/include/util/atomic.h **** {
  70:/opt/local/avr/include/util/atomic.h ****     SREG = *__s;
 141               		.loc 5 70 0
 142 001c 2FBF      		out __SREG__,r18
  71:/opt/local/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 143               		.loc 5 71 0
 144               	.LBE68:
 145               	.LBE67:
 146               	.LBE64:
 147               	.LBE63:
 106:Arduino-joystick.c **** 
 148               		.loc 1 106 0
 149               	/* #APP */
 150               	 ;  106 "Arduino-joystick.c" 1
 151 001e 7894      		sei
 152               	 ;  0 "" 2
 153               	.LVL6:
 154               	/* #NOAPP */
 155               	.L3:
 109:Arduino-joystick.c **** 	USB_USBTask();
 156               		.loc 1 109 0
 157 0020 80E0      		ldi r24,lo8(Joystick_HID_Interface)
 158 0022 90E0      		ldi r25,hi8(Joystick_HID_Interface)
 159 0024 0E94 0000 		call HID_Device_USBTask
 160               	.LVL7:
 110:Arduino-joystick.c **** 
 161               		.loc 1 110 0
 162 0028 0E94 0000 		call USB_USBTask
 163               	.LVL8:
 113:Arduino-joystick.c **** 	    led1_ticks--;
 164               		.loc 1 113 0
 165 002c 8091 0000 		lds r24,led1_ticks
 166 0030 9091 0000 		lds r25,led1_ticks+1
 167 0034 892B      		or r24,r25
 168 0036 01F0      		breq .L3
 114:Arduino-joystick.c **** 	    if (led1_ticks == 0) {
 169               		.loc 1 114 0
 170 0038 8091 0000 		lds r24,led1_ticks
 171 003c 9091 0000 		lds r25,led1_ticks+1
 172 0040 0197      		sbiw r24,1
 173 0042 9093 0000 		sts led1_ticks+1,r25
 174 0046 8093 0000 		sts led1_ticks,r24
 115:Arduino-joystick.c **** 		LEDs_TurnOffLEDs(LEDS_LED1);
 175               		.loc 1 115 0
 176 004a 8091 0000 		lds r24,led1_ticks
 177 004e 9091 0000 		lds r25,led1_ticks+1
 178 0052 892B      		or r24,r25
 179 0054 01F4      		brne .L3
 180               	.LVL9:
 181               	.LBB69:
 182               	.LBB70:
  71:./Board/LEDs.h **** 			}
  72:./Board/LEDs.h **** 			
  73:./Board/LEDs.h **** 			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
  74:./Board/LEDs.h **** 			{
  75:./Board/LEDs.h **** 				PORTD &= ~LEDMask;
  76:./Board/LEDs.h **** 			}
  77:./Board/LEDs.h **** 
  78:./Board/LEDs.h **** 			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
  79:./Board/LEDs.h **** 			{
  80:./Board/LEDs.h **** 				PORTD |= LEDMask;
 183               		.loc 3 80 0
 184 0056 5D9A      		sbi 0xb,5
 185 0058 00C0      		rjmp .L3
 186               	.LBE70:
 187               	.LBE69:
 188               		.cfi_endproc
 189               	.LFE86:
 191               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 192               	.global	EVENT_USB_Device_Connect
 194               	EVENT_USB_Device_Connect:
 195               	.LFB88:
 136:Arduino-joystick.c **** 
 137:Arduino-joystick.c **** /** Event handler for the library USB Connection event. */
 138:Arduino-joystick.c **** void EVENT_USB_Device_Connect(void)
 139:Arduino-joystick.c **** {
 196               		.loc 1 139 0
 197               		.cfi_startproc
 198               	/* prologue: function */
 199               	/* frame size = 0 */
 200               	/* stack size = 0 */
 201               	.L__stack_usage = 0
 202 0000 0895      		ret
 203               		.cfi_endproc
 204               	.LFE88:
 206               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 207               	.global	EVENT_USB_Device_Disconnect
 209               	EVENT_USB_Device_Disconnect:
 210               	.LFB89:
 140:Arduino-joystick.c **** 	//LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 141:Arduino-joystick.c **** }
 142:Arduino-joystick.c **** 
 143:Arduino-joystick.c **** /** Event handler for the library USB Disconnection event. */
 144:Arduino-joystick.c **** void EVENT_USB_Device_Disconnect(void)
 145:Arduino-joystick.c **** {
 211               		.loc 1 145 0
 212               		.cfi_startproc
 213               	/* prologue: function */
 214               	/* frame size = 0 */
 215               	/* stack size = 0 */
 216               	.L__stack_usage = 0
 217 0000 0895      		ret
 218               		.cfi_endproc
 219               	.LFE89:
 221               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 222               	.global	EVENT_USB_Device_ConfigurationChanged
 224               	EVENT_USB_Device_ConfigurationChanged:
 225               	.LFB90:
 146:Arduino-joystick.c **** }
 147:Arduino-joystick.c **** 
 148:Arduino-joystick.c **** /** Event handler for the library USB Configuration Changed event. */
 149:Arduino-joystick.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 150:Arduino-joystick.c **** {
 226               		.loc 1 150 0
 227               		.cfi_startproc
 228               	/* prologue: function */
 229               	/* frame size = 0 */
 230               	/* stack size = 0 */
 231               	.L__stack_usage = 0
 151:Arduino-joystick.c ****     HID_Device_ConfigureEndpoints(&Joystick_HID_Interface);
 232               		.loc 1 151 0
 233 0000 80E0      		ldi r24,lo8(Joystick_HID_Interface)
 234 0002 90E0      		ldi r25,hi8(Joystick_HID_Interface)
 235 0004 0E94 0000 		call HID_Device_ConfigureEndpoints
 236               	.LVL10:
 237               	.LBB71:
 238               	.LBB72:
 239               		.file 6 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h"
   1:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /*
   2:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****               
   5:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** */
   8:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
   9:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /*
  10:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  12:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   without fee, provided that the above copyright notice appear in 
  15:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   documentation, and that the name of the author not be used in 
  18:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   advertising or publicity pertaining to distribution of the 
  19:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  21:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   this software.
  29:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** */
  30:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  31:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /** \file
  32:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  \brief USB device mode definitions.
  33:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  34:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  This file contains structures, function prototypes and macros related to USB device mode.
  35:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  36:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  37:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  38:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  */
  39:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  40:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /** \ingroup Group_USB
  41:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  @defgroup Group_Device Device Management
  42:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  43:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  USB Device mode related macros and enums. This module contains macros and enums which are used 
  44:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  the USB controller is initialized in device mode.
  45:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  46:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  @{
  47:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  */
  48:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  49:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** #ifndef __USBDEVICE_H__
  50:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** #define __USBDEVICE_H__
  51:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  52:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Includes: */
  53:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include <avr/io.h>
  54:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include <avr/pgmspace.h>
  55:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include <avr/eeprom.h>
  56:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  57:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "../../../Common/Common.h"	
  58:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "../HighLevel/StdDescriptors.h"
  59:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "USBInterrupt.h"
  60:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "Endpoint.h"
  61:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  62:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Preprocessor Checks: */
  63:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#if (defined(USE_RAM_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  64:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#error USE_RAM_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  65:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#endif
  66:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  67:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  68:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  69:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#endif
  70:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
  71:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Public Interface - May be used in end-application: */
  72:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Macros: */
  73:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
  74:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  75:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *  USB interface should be initialized in low speed (1.5Mb/s) mode.
  76:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *
  77:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *  \note Low Speed mode is not available on all USB AVR models.
  78:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *        \n\n
  79:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *
  80:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *  \note Restrictions apply on the number, size and type of endpoints which can be used
  81:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *        when running in low speed mode -- refer to the USB 2.0 standard.
  82:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 */
  83:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				#define USB_DEVICE_OPT_LOWSPEED            (1 << 0)
  84:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#endif
  85:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
  86:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  87:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  USB interface should be initialized in full speed (12Mb/s) mode.
  88:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
  89:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#define USB_DEVICE_OPT_FULLSPEED               (0 << 0)
  90:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  91:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Function Prototypes: */
  92:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Sends a Remote Wakeup request to the host. This signals to the host that the device should
  93:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  be taken out of suspended mode, and communications should resume.
  94:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
  95:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  Typically, this is implemented so that HID devices (mice, keyboards, etc.) can wake up the
  96:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  host computer when the host has suspended all USB devices to enter a low power state.
  97:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
  98:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \note This macro should only be used if the device has indicated to the host that it
  99:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        supports the Remote Wakeup feature in the device descriptors, and should only be
 100:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        issued if the host is currently allowing remote wakeup events from the device (i.e.,
 101:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        the \ref USB_RemoteWakeupEnabled flag is set). When the NO_DEVICE_REMOTE_WAKEUP compil
 102:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        time option is used, this macro is unavailable.
 103:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        \n
 104:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
 105:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \note The USB clock must be running for this function to operate. If the stack is initialize
 106:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        the \ref USB_OPT_MANUAL_PLL option enabled, the user must ensure that the PLL is runni
 107:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        before attempting to call this function.
 108:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
 109:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \see \ref Group_Descriptors for more information on the RMWAKEUP feature and device descript
 110:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
 111:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			void USB_Device_SendRemoteWakeup(void);
 112:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
 113:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Type Defines: */
 114:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			enum USB_Device_States_t
 115:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 116:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Unattached                   = 0, /**< Internally implemented by the library. This
 117:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device is not currently connected 
 118:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 119:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Powered                      = 1, /**< Internally implemented by the library. This
 120:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device is connected to a host, but
 121:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   yet begun.
 122:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 123:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Default                      = 2, /**< Internally implemented by the library. This
 124:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device's USB bus has been reset by
 125:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   now waiting for the host to begin the enume
 126:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 127:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Addressed                    = 3, /**< Internally implemented by the library. This
 128:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device has been addressed by the U
 129:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   yet configured.
 130:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 131:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Configured                   = 4, /**< May be implemented by the user project. Thi
 132:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device has been enumerated by the 
 133:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   for USB communications to begin.
 134:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 135:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Suspended                    = 5, /**< May be implemented by the user project. Thi
 136:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the USB bus has been suspended by the 
 137:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   should power down to a minimal power level 
 138:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   resumed.
 139:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 140:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			};
 141:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
 142:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Inline Functions: */
 143:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Enables the device mode Start Of Frame events. When enabled, this causes the
 144:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \ref EVENT_USB_Device_StartOfFrame() event to fire once per millisecond, synchronized to the
 145:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  at the start of each USB frame when enumerated in device mode.
 146:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
 147:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
 148:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_EnableSOFEvents(void)
 149:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 150:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				USB_INT_Enable(USB_INT_SOFI);
 240               		.loc 6 150 0
 241 0008 E2EE      		ldi r30,lo8(-30)
 242 000a F0E0      		ldi r31,0
 243 000c 8081      		ld r24,Z
 244 000e 8460      		ori r24,lo8(4)
 245 0010 8083      		st Z,r24
 246 0012 0895      		ret
 247               	.LBE72:
 248               	.LBE71:
 249               		.cfi_endproc
 250               	.LFE90:
 252               		.section	.text.EVENT_USB_Device_UnhandledControlRequest,"ax",@progbits
 253               	.global	EVENT_USB_Device_UnhandledControlRequest
 255               	EVENT_USB_Device_UnhandledControlRequest:
 256               	.LFB91:
 152:Arduino-joystick.c **** 
 153:Arduino-joystick.c ****     USB_Device_EnableSOFEvents();
 154:Arduino-joystick.c **** }
 155:Arduino-joystick.c **** 
 156:Arduino-joystick.c **** /** Event handler for the library USB Unhandled Control Request event. */
 157:Arduino-joystick.c **** void EVENT_USB_Device_UnhandledControlRequest(void)
 158:Arduino-joystick.c **** {
 257               		.loc 1 158 0
 258               		.cfi_startproc
 259               	/* prologue: function */
 260               	/* frame size = 0 */
 261               	/* stack size = 0 */
 262               	.L__stack_usage = 0
 159:Arduino-joystick.c ****     HID_Device_ProcessControlRequest(&Joystick_HID_Interface);
 263               		.loc 1 159 0
 264 0000 80E0      		ldi r24,lo8(Joystick_HID_Interface)
 265 0002 90E0      		ldi r25,hi8(Joystick_HID_Interface)
 266 0004 0C94 0000 		jmp HID_Device_ProcessControlRequest
 267               	.LVL11:
 268               		.cfi_endproc
 269               	.LFE91:
 271               		.section	.text.EVENT_USB_Device_StartOfFrame,"ax",@progbits
 272               	.global	EVENT_USB_Device_StartOfFrame
 274               	EVENT_USB_Device_StartOfFrame:
 275               	.LFB92:
 160:Arduino-joystick.c **** }
 161:Arduino-joystick.c **** 
 162:Arduino-joystick.c **** /** Event handler for the USB device Start Of Frame event. */
 163:Arduino-joystick.c **** void EVENT_USB_Device_StartOfFrame(void)
 164:Arduino-joystick.c **** {
 276               		.loc 1 164 0
 277               		.cfi_startproc
 278               	/* prologue: function */
 279               	/* frame size = 0 */
 280               	/* stack size = 0 */
 281               	.L__stack_usage = 0
 282               	.LVL12:
 283               	.LBB73:
 284               	.LBB74:
 285               		.file 7 "../../LUFA/Drivers/USB/Class/Device/HID.h"
   1:../../LUFA/Drivers/USB/Class/Device/HID.h **** /*
   2:../../LUFA/Drivers/USB/Class/Device/HID.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/Class/Device/HID.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/Class/Device/HID.h ****               
   5:../../LUFA/Drivers/USB/Class/Device/HID.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/Class/Device/HID.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/Class/Device/HID.h **** */
   8:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
   9:../../LUFA/Drivers/USB/Class/Device/HID.h **** /*
  10:../../LUFA/Drivers/USB/Class/Device/HID.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  12:../../LUFA/Drivers/USB/Class/Device/HID.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../LUFA/Drivers/USB/Class/Device/HID.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/Class/Device/HID.h ****   without fee, provided that the above copyright notice appear in 
  15:../../LUFA/Drivers/USB/Class/Device/HID.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/Class/Device/HID.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../../LUFA/Drivers/USB/Class/Device/HID.h ****   documentation, and that the name of the author not be used in 
  18:../../LUFA/Drivers/USB/Class/Device/HID.h ****   advertising or publicity pertaining to distribution of the 
  19:../../LUFA/Drivers/USB/Class/Device/HID.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  21:../../LUFA/Drivers/USB/Class/Device/HID.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/Class/Device/HID.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/Class/Device/HID.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/Class/Device/HID.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/Class/Device/HID.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/Class/Device/HID.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/Class/Device/HID.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/Class/Device/HID.h ****   this software.
  29:../../LUFA/Drivers/USB/Class/Device/HID.h **** */
  30:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  31:../../LUFA/Drivers/USB/Class/Device/HID.h **** /** \file
  32:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  \brief Device mode driver for the library USB HID Class driver.
  33:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *
  34:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  Device mode driver for the library USB HID Class driver.
  35:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *
  36:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  37:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *        dispatch header located in LUFA/Drivers/USB/Class/HID.h.
  38:../../LUFA/Drivers/USB/Class/Device/HID.h ****  */
  39:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  40:../../LUFA/Drivers/USB/Class/Device/HID.h **** /** \ingroup Group_USBClassHID
  41:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  @defgroup Group_USBClassHIDDevice HID Class Device Mode Driver
  42:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *
  43:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  \section Sec_Dependencies Module Source Dependencies
  44:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  The following files must be built with any user project that uses this module:
  45:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *    - LUFA/Drivers/USB/Class/Device/HID.c <i>(Makefile source module name: LUFA_SRC_USBCLASS)</i>
  46:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *
  47:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  \section Module Description
  48:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  Device Mode USB Class driver framework interface, for the HID USB Class driver.
  49:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *
  50:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  @{
  51:../../LUFA/Drivers/USB/Class/Device/HID.h ****  */
  52:../../LUFA/Drivers/USB/Class/Device/HID.h ****  
  53:../../LUFA/Drivers/USB/Class/Device/HID.h **** #ifndef _HID_CLASS_DEVICE_H_
  54:../../LUFA/Drivers/USB/Class/Device/HID.h **** #define _HID_CLASS_DEVICE_H_
  55:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  56:../../LUFA/Drivers/USB/Class/Device/HID.h **** 	/* Includes: */
  57:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		#include "../../USB.h"
  58:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		#include "../Common/HID.h"
  59:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  60:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		#include <string.h>
  61:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  62:../../LUFA/Drivers/USB/Class/Device/HID.h **** 	/* Enable C linkage for C++ Compilers: */
  63:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		#if defined(__cplusplus)
  64:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			extern "C" {
  65:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		#endif
  66:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  67:../../LUFA/Drivers/USB/Class/Device/HID.h **** 	/* Preprocessor Checks: */
  68:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		#if !defined(__INCLUDE_FROM_HID_DRIVER)
  69:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			#error Do not include this file directly. Include LUFA/Drivers/Class/HID.h instead.
  70:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		#endif
  71:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  72:../../LUFA/Drivers/USB/Class/Device/HID.h **** 	/* Public Interface - May be used in end-application: */
  73:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		/* Type Defines: */
  74:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			/** \brief HID Class Device Mode Configuration and State Structure.
  75:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
  76:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  Class state structure. An instance of this structure should be made for each HID interface
  77:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  within the user application, and passed to each of the HID class driver functions as the
  78:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  HIDInterfaceInfo parameter. This stores each HID interface's configuration and state informa
  79:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
  80:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \note Due to technical limitations, the HID device class driver does not utilize a separate 
  81:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *        endpoint for host->device communications. Instead, the host->device data (if any) is s
  82:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *        the device via the control endpoint.
  83:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
  84:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			typedef struct
  85:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			{
  86:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				const struct
  87:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				{
  88:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					uint8_t  InterfaceNumber; /**< Interface number of the HID interface within the device. */
  89:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  90:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					uint8_t  ReportINEndpointNumber; /**< Endpoint number of the HID interface's IN report endpoin
  91:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					uint16_t ReportINEndpointSize; /**< Size in bytes of the HID interface's IN report endpoint. *
  92:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					bool     ReportINEndpointDoubleBank; /**< Indicates if the HID interface's IN report endpoint 
  93:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					
  94:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					void*    PrevReportINBuffer; /**< Pointer to a buffer where the previously created HID input r
  95:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					                              *  stored by the driver, for comparison purposes to detect repor
  96:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					                              *  must be sent immediately to the host. This should point to a 
  97:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					                              *  to hold the largest HID input report sent from the HID interf
  98:../../LUFA/Drivers/USB/Class/Device/HID.h **** 												  *  to NULL, it is up to the user to force transfers when needed in the 
  99:../../LUFA/Drivers/USB/Class/Device/HID.h **** 												  *  \ref CALLBACK_HID_Device_CreateHIDReport() callback function.
 100:../../LUFA/Drivers/USB/Class/Device/HID.h **** 												  *
 101:../../LUFA/Drivers/USB/Class/Device/HID.h **** 												  *  \note Due to the single buffer, the internal driver can only correctly compare
 102:../../LUFA/Drivers/USB/Class/Device/HID.h **** 												  *        subsequent reports with identical report IDs. In multiple report devices,
 103:../../LUFA/Drivers/USB/Class/Device/HID.h **** 												  *        this buffer should be set to NULL and the decision to send reports made
 104:../../LUFA/Drivers/USB/Class/Device/HID.h **** 												  *        by the user application instead.
 105:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					                              */
 106:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					uint8_t  PrevReportINBufferSize; /**< Size in bytes of the given input report buffer. This is 
 107:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					                                  *  second buffer of the same size within the driver so that 
 108:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					                                  *  can be compared. If the user app is to determine when rep
 109:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					                                  *  exclusively (i.e. \ref PrevReportINBuffer is NULL) this v
 110:../../LUFA/Drivers/USB/Class/Device/HID.h **** 													  *  set to the size of the largest report the device can issue to the host.
 111:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					                                  */
 112:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				} Config; /**< Config data for the USB class interface within the device. All elements in this 
 113:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				           *   <b>must</b> be set or the interface will fail to enumerate and operate correctly
 114:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				           */										 
 115:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				struct
 116:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				{
 117:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					bool     UsingReportProtocol; /**< Indicates if the HID interface is set to Boot or Report pro
 118:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					uint16_t IdleCount; /**< Report idle period, in milliseconds, set by the host. */
 119:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					uint16_t IdleMSRemaining; /**< Total number of milliseconds remaining before the idle period e
 120:../../LUFA/Drivers/USB/Class/Device/HID.h **** 											   *   should be decremented by the user application if non-zero each millisecond. */	
 121:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				} State; /**< State data for the USB class interface within the device. All elements in this se
 122:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				          *   are reset to their defaults when the interface is enumerated.
 123:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				          */
 124:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			} USB_ClassInfo_HID_Device_t;
 125:../../LUFA/Drivers/USB/Class/Device/HID.h **** 	
 126:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		/* Function Prototypes: */
 127:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			/** Configures the endpoints of a given HID interface, ready for use. This should be linked to t
 128:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \ref EVENT_USB_Device_ConfigurationChanged() event so that the endpoints are configured when
 129:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  containing the given HID interface is selected.
 130:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 131:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 132:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 133:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \return Boolean true if the endpoints were successfully configured, false otherwise.
 134:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
 135:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_NON_
 136:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			
 137:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			/** Processes incoming control requests from the host, that are directed to the given HID class 
 138:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  linked to the library \ref EVENT_USB_Device_UnhandledControlRequest() event.
 139:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 140:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 141:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 */		
 142:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_N
 143:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
 144:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			/** General management task for a given HID class interface, required for the correct operation 
 145:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  be called frequently in the main program loop, before the master USB management task \ref US
 146:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 147:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 148:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
 149:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_NON_NULL_PTR_AR
 150:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			
 151:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			/** HID class driver callback for the user creation of a HID IN report. This callback may fire i
 152:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  HID class control requests from the host, or by the normal HID endpoint polling procedure. I
 153:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  user is responsible for the creation of the next HID input report to be sent to the host.
 154:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 155:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 156:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] ReportID          If preset to a non-zero value, this is the report ID being 
 157:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *                                   this should be set to the report ID of the generated HID in
 158:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *                                   reports are not sent via the given HID interface, this para
 159:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in]     ReportType        Type of HID report to generate, either \ref REPORT_ITEM_TYP
 160:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[out]    ReportData        Pointer to a buffer where the generated HID report should b
 161:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[out]    ReportSize        Number of bytes in the generated input report, or zero if n
 162:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 163:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \return Boolean true to force the sending of the report even if it is identical to the previ
 164:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *          the idle period (useful for devices which report relative movement), false otherwise
 165:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
 166:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
 167:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                         uint8_t* const ReportID,
 168:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                         const uint8_t ReportType,
 169:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                         void* ReportData,
 170:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                         uint16_t* const ReportSize) ATTR_NON_NULL_PTR_ARG(1)
 171:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                         ATTR_NON_NULL_PTR_ARG(2) ATTR_NON_NULL_PTR_ARG(4) ATTR_
 172:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			
 173:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			/** HID class driver callback for the user processing of a received HID OUT report. This callbac
 174:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  either HID class control requests from the host, or by the normal HID endpoint polling proce
 175:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  the user is responsible for the processing of the received HID output report from the host.
 176:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 177:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 178:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in]     ReportID          Report ID of the received output report. If multiple report
 179:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *                                   interface, this parameter should be ignored.
 180:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in]     ReportType        Type of received HID report, either \ref REPORT_ITEM_TYPE_O
 181:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in]     ReportData        Pointer to a buffer where the received HID report is stored
 182:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in]     ReportSize        Size in bytes of the received report from the host.
 183:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
 184:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
 185:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                          const uint8_t ReportID,
 186:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                          const uint8_t ReportType,
 187:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                          const void* ReportData,
 188:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                          const uint16_t ReportSize) ATTR_NON_NULL_PTR_ARG(1) AT
 189:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
 190:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		/* Inline Functions: */
 191:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			/** Indicates that a millisecond of idle time has elapsed on the given HID interface, and the in
 192:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  decremented. This should be called once per millisecond so that hardware key-repeats functio
 193:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  that this be called by the \ref EVENT_USB_Device_StartOfFrame() event, once SOF events have 
 194:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \ref USB_Device_EnableSOFEvents().
 195:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 196:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 197:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
 198:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceI
 199:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceI
 200:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			{
 201:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				if (HIDInterfaceInfo->State.IdleMSRemaining)
 286               		.loc 7 201 0
 287 0000 8091 0000 		lds r24,Joystick_HID_Interface+11
 288 0004 9091 0000 		lds r25,Joystick_HID_Interface+11+1
 289 0008 0097      		sbiw r24,0
 290 000a 01F0      		breq .L14
 202:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				  HIDInterfaceInfo->State.IdleMSRemaining--;
 291               		.loc 7 202 0
 292 000c 0197      		sbiw r24,1
 293 000e 9093 0000 		sts Joystick_HID_Interface+11+1,r25
 294 0012 8093 0000 		sts Joystick_HID_Interface+11,r24
 295               	.L14:
 296 0016 0895      		ret
 297               	.LBE74:
 298               	.LBE73:
 299               		.cfi_endproc
 300               	.LFE92:
 302               		.section	.text.CALLBACK_HID_Device_CreateHIDReport,"ax",@progbits
 303               	.global	CALLBACK_HID_Device_CreateHIDReport
 305               	CALLBACK_HID_Device_CreateHIDReport:
 306               	.LFB93:
 165:Arduino-joystick.c ****     HID_Device_MillisecondElapsed(&Joystick_HID_Interface);
 166:Arduino-joystick.c **** }
 167:Arduino-joystick.c **** 
 168:Arduino-joystick.c **** /** HID class driver callback function for the creation of HID reports to the host.
 169:Arduino-joystick.c ****  *
 170:Arduino-joystick.c ****  *  \param[in]     HIDInterfaceInfo  Pointer to the HID class interface configuration structure bei
 171:Arduino-joystick.c ****  *  \param[in,out] ReportID    Report ID requested by the host if non-zero, otherwise callback shou
 172:Arduino-joystick.c ****  *  \param[in]     ReportType  Type of the report to create, either REPORT_ITEM_TYPE_In or REPORT_I
 173:Arduino-joystick.c ****  *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 174:Arduino-joystick.c ****  *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be
 175:Arduino-joystick.c ****  *
 176:Arduino-joystick.c ****  *  \return Boolean true to force the sending of the report, false to let the library determine if 
 177:Arduino-joystick.c ****  */
 178:Arduino-joystick.c **** bool CALLBACK_HID_Device_CreateHIDReport(
 179:Arduino-joystick.c ****     USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
 180:Arduino-joystick.c ****     uint8_t* const ReportID,
 181:Arduino-joystick.c ****     const uint8_t ReportType,
 182:Arduino-joystick.c ****     void* ReportData,
 183:Arduino-joystick.c ****     uint16_t* const ReportSize)
 184:Arduino-joystick.c **** {
 307               		.loc 1 184 0
 308               		.cfi_startproc
 309               	.LVL13:
 310 0000 0F93      		push r16
 311               	.LCFI2:
 312               		.cfi_def_cfa_offset 3
 313               		.cfi_offset 16, -2
 314 0002 1F93      		push r17
 315               	.LCFI3:
 316               		.cfi_def_cfa_offset 4
 317               		.cfi_offset 17, -3
 318 0004 CF93      		push r28
 319               	.LCFI4:
 320               		.cfi_def_cfa_offset 5
 321               		.cfi_offset 28, -4
 322 0006 DF93      		push r29
 323               	.LCFI5:
 324               		.cfi_def_cfa_offset 6
 325               		.cfi_offset 29, -5
 326               	/* prologue: function */
 327               	/* frame size = 0 */
 328               	/* stack size = 4 */
 329               	.L__stack_usage = 4
 330               	.LVL14:
 331               	.LBB92:
 332               	.LBB93:
 333               	.LBB94:
  91:Lib/LightweightRingBuff.h **** 			}
  92:Lib/LightweightRingBuff.h **** 		}
  93:Lib/LightweightRingBuff.h **** 		
  94:Lib/LightweightRingBuff.h **** 		/** Retrieves the minimum number of bytes stored in a particular buffer. This value is computed
  95:Lib/LightweightRingBuff.h **** 		 *  by entering an atomic lock on the buffer while the IN and OUT locations are fetched, so that
  96:Lib/LightweightRingBuff.h **** 		 *  the buffer cannot be modified while the computation takes place. This value should be cached
  97:Lib/LightweightRingBuff.h **** 		 *  when reading out the contents of the buffer, so that as small a time as possible is spent
  98:Lib/LightweightRingBuff.h **** 		 *  in an atomic lock.
  99:Lib/LightweightRingBuff.h **** 		 *
 100:Lib/LightweightRingBuff.h **** 		 *  \note The value returned by this function is guaranteed to only be the minimum number of byte
 101:Lib/LightweightRingBuff.h **** 		 *        stored in the given buffer; this value may change as other threads write new data and s
 102:Lib/LightweightRingBuff.h **** 		 *        the returned number should be used only to determine how many successive reads may safe
 103:Lib/LightweightRingBuff.h **** 		 *        be performed on the buffer.
 104:Lib/LightweightRingBuff.h **** 		 *
 105:Lib/LightweightRingBuff.h **** 		 *  \param[in] Buffer  Pointer to a ring buffer structure whose count is to be computed
 106:Lib/LightweightRingBuff.h **** 		 */
 107:Lib/LightweightRingBuff.h **** 		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
 108:Lib/LightweightRingBuff.h **** 		{
 109:Lib/LightweightRingBuff.h **** 			RingBuff_Count_t Count;
 110:Lib/LightweightRingBuff.h **** 			
 111:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 334               		.loc 4 111 0
 335 0008 9FB7      		in r25,__SREG__
 336               	.LVL15:
 337               	.LBB95:
 338               	.LBB96:
  50:/opt/local/avr/include/util/atomic.h ****     return 1;
 339               		.loc 5 50 0
 340               	/* #APP */
 341               	 ;  50 "/opt/local/avr/include/util/atomic.h" 1
 342 000a F894      		cli
 343               	 ;  0 "" 2
 344               	.LVL16:
 345               	/* #NOAPP */
 346               	.LBE96:
 347               	.LBE95:
 112:Lib/LightweightRingBuff.h **** 			{
 113:Lib/LightweightRingBuff.h **** 				Count = Buffer->Count;
 348               		.loc 4 113 0
 349 000c 8091 0000 		lds r24,USARTtoUSB_Buffer+132
 350               	.LVL17:
 351               	.LBB97:
 352               	.LBB98:
  70:/opt/local/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 353               		.loc 5 70 0
 354 0010 9FBF      		out __SREG__,r25
 355               		.loc 5 71 0
 356               	.LBE98:
 357               	.LBE97:
 358               	.LBE94:
 359               	.LBE93:
 360               	.LBE92:
 185:Arduino-joystick.c ****     USB_JoystickReport_Data_t *reportp = (USB_JoystickReport_Data_t*)ReportData;
 186:Arduino-joystick.c **** 
 187:Arduino-joystick.c ****     RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
 188:Arduino-joystick.c **** 
 189:Arduino-joystick.c ****     /* If there's a new report from the Arduino, copy it in and send that.
 190:Arduino-joystick.c ****      * If not then the last report is sent again.
 191:Arduino-joystick.c ****      */
 192:Arduino-joystick.c ****     if (BufferCount >= sizeof(joyReport)) {
 361               		.loc 1 192 0
 362 0012 8830      		cpi r24,lo8(8)
 363 0014 00F0      		brlo .L20
 364 0016 E0E0      		ldi r30,lo8(joyReport)
 365 0018 F0E0      		ldi r31,hi8(joyReport)
 366               	.LBB99:
 367               	.LBB100:
 368               	.LBB101:
 114:Lib/LightweightRingBuff.h **** 			}
 115:Lib/LightweightRingBuff.h **** 			
 116:Lib/LightweightRingBuff.h **** 			return Count;
 117:Lib/LightweightRingBuff.h **** 		}
 118:Lib/LightweightRingBuff.h **** 		
 119:Lib/LightweightRingBuff.h **** 		/** Atomically determines if the specified ring buffer contains any free space. This should
 120:Lib/LightweightRingBuff.h **** 		 *  be tested before storing data to the buffer, to ensure that no data is lost due to a
 121:Lib/LightweightRingBuff.h **** 		 *  buffer overrun.
 122:Lib/LightweightRingBuff.h **** 		 *
 123:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
 124:Lib/LightweightRingBuff.h **** 		 *
 125:Lib/LightweightRingBuff.h **** 		 *  \return Boolean true if the buffer contains no free space, false otherwise
 126:Lib/LightweightRingBuff.h **** 		 */		 
 127:Lib/LightweightRingBuff.h **** 		static inline bool RingBuffer_IsFull(RingBuff_t* const Buffer)
 128:Lib/LightweightRingBuff.h **** 		{
 129:Lib/LightweightRingBuff.h **** 			return (RingBuffer_GetCount(Buffer) == BUFFER_SIZE);
 130:Lib/LightweightRingBuff.h **** 		}
 131:Lib/LightweightRingBuff.h **** 
 132:Lib/LightweightRingBuff.h **** 		/** Atomically determines if the specified ring buffer contains any data. This should
 133:Lib/LightweightRingBuff.h **** 		 *  be tested before removing data from the buffer, to ensure that the buffer does not
 134:Lib/LightweightRingBuff.h **** 		 *  underflow.
 135:Lib/LightweightRingBuff.h **** 		 *
 136:Lib/LightweightRingBuff.h **** 		 *  If the data is to be removed in a loop, store the total number of bytes stored in the
 137:Lib/LightweightRingBuff.h **** 		 *  buffer (via a call to the \ref RingBuffer_GetCount() function) in a temporary variable
 138:Lib/LightweightRingBuff.h **** 		 *  to reduce the time spent in atomicity locks.
 139:Lib/LightweightRingBuff.h **** 		 *
 140:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
 141:Lib/LightweightRingBuff.h **** 		 *
 142:Lib/LightweightRingBuff.h **** 		 *  \return Boolean true if the buffer contains no free space, false otherwise
 143:Lib/LightweightRingBuff.h **** 		 */		 
 144:Lib/LightweightRingBuff.h **** 		static inline bool RingBuffer_IsEmpty(RingBuff_t* const Buffer)
 145:Lib/LightweightRingBuff.h **** 		{
 146:Lib/LightweightRingBuff.h **** 			return (RingBuffer_GetCount(Buffer) == 0);
 147:Lib/LightweightRingBuff.h **** 		}
 148:Lib/LightweightRingBuff.h **** 
 149:Lib/LightweightRingBuff.h **** 		/** Inserts an element into the ring buffer.
 150:Lib/LightweightRingBuff.h **** 		 *
 151:Lib/LightweightRingBuff.h **** 		 *  \note Only one execution thread (main program thread or an ISR) may insert into a single buff
 152:Lib/LightweightRingBuff.h **** 		 *        otherwise data corruption may occur. Insertion and removal may occur from different exe
 153:Lib/LightweightRingBuff.h **** 		 *        threads.
 154:Lib/LightweightRingBuff.h **** 		 *
 155:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
 156:Lib/LightweightRingBuff.h **** 		 *  \param[in]     Data    Data element to insert into the buffer
 157:Lib/LightweightRingBuff.h **** 		 */
 158:Lib/LightweightRingBuff.h **** 		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
 159:Lib/LightweightRingBuff.h **** 		                                     const RingBuff_Data_t Data)
 160:Lib/LightweightRingBuff.h **** 		{
 161:Lib/LightweightRingBuff.h **** 			*Buffer->In = Data;
 162:Lib/LightweightRingBuff.h **** 			
 163:Lib/LightweightRingBuff.h **** 			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 164:Lib/LightweightRingBuff.h **** 			  Buffer->In = Buffer->Buffer;
 165:Lib/LightweightRingBuff.h **** 
 166:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 167:Lib/LightweightRingBuff.h **** 			{
 168:Lib/LightweightRingBuff.h **** 				Buffer->Count++;
 169:Lib/LightweightRingBuff.h **** 			}
 170:Lib/LightweightRingBuff.h **** 		}
 171:Lib/LightweightRingBuff.h **** 
 172:Lib/LightweightRingBuff.h **** 		/** Removes an element from the ring buffer.
 173:Lib/LightweightRingBuff.h **** 		 *
 174:Lib/LightweightRingBuff.h **** 		 *  \note Only one execution thread (main program thread or an ISR) may remove from a single buff
 175:Lib/LightweightRingBuff.h **** 		 *        otherwise data corruption may occur. Insertion and removal may occur from different exe
 176:Lib/LightweightRingBuff.h **** 		 *        threads.
 177:Lib/LightweightRingBuff.h **** 		 *
 178:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to retrieve from
 179:Lib/LightweightRingBuff.h **** 		 *
 180:Lib/LightweightRingBuff.h **** 		 *  \return Next data element stored in the buffer
 181:Lib/LightweightRingBuff.h **** 		 */
 182:Lib/LightweightRingBuff.h **** 		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
 183:Lib/LightweightRingBuff.h **** 		{
 184:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t Data = *Buffer->Out;
 369               		.loc 4 184 0
 370 001a 60E0      		ldi r22,lo8(USARTtoUSB_Buffer)
 371 001c 70E0      		ldi r23,hi8(USARTtoUSB_Buffer)
 372               	.LVL18:
 373 001e 98E0      		ldi r25,lo8(8)
 374               	.LVL19:
 375 0020 9E0F      		add r25,r30
 376               	.LVL20:
 377               	.L22:
 378               		.loc 4 184 0 is_stmt 0 discriminator 3
 379 0022 C091 0000 		lds r28,USARTtoUSB_Buffer+130
 380 0026 D091 0000 		lds r29,USARTtoUSB_Buffer+130+1
 381 002a 4991      		ld r20,Y+
 382               	.LVL21:
 185:Lib/LightweightRingBuff.h **** 			
 186:Lib/LightweightRingBuff.h **** 			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 383               		.loc 4 186 0 is_stmt 1 discriminator 3
 384 002c D093 0000 		sts USARTtoUSB_Buffer+130+1,r29
 385 0030 C093 0000 		sts USARTtoUSB_Buffer+130,r28
 386 0034 C050      		subi r28,lo8(USARTtoUSB_Buffer+128)
 387 0036 D040      		sbci r29,hi8(USARTtoUSB_Buffer+128)
 388 0038 01F4      		brne .L21
 187:Lib/LightweightRingBuff.h **** 			  Buffer->Out = Buffer->Buffer;
 389               		.loc 4 187 0
 390 003a 7093 0000 		sts USARTtoUSB_Buffer+130+1,r23
 391 003e 6093 0000 		sts USARTtoUSB_Buffer+130,r22
 392               	.L21:
 393               	.LBB102:
 188:Lib/LightweightRingBuff.h **** 
 189:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 394               		.loc 4 189 0
 395 0042 5FB7      		in r21,__SREG__
 396               	.LVL22:
 397               	.LBB103:
 398               	.LBB104:
  50:/opt/local/avr/include/util/atomic.h ****     return 1;
 399               		.loc 5 50 0
 400               	/* #APP */
 401               	 ;  50 "/opt/local/avr/include/util/atomic.h" 1
 402 0044 F894      		cli
 403               	 ;  0 "" 2
 404               	.LVL23:
 405               	/* #NOAPP */
 406               	.LBE104:
 407               	.LBE103:
 190:Lib/LightweightRingBuff.h **** 			{
 191:Lib/LightweightRingBuff.h **** 				Buffer->Count--;
 408               		.loc 4 191 0
 409 0046 8091 0000 		lds r24,USARTtoUSB_Buffer+132
 410 004a 8150      		subi r24,lo8(-(-1))
 411 004c 8093 0000 		sts USARTtoUSB_Buffer+132,r24
 412               	.LVL24:
 413               	.LBB105:
 414               	.LBB106:
  70:/opt/local/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 415               		.loc 5 70 0
 416 0050 5FBF      		out __SREG__,r21
 417               		.loc 5 71 0
 418               	.LBE106:
 419               	.LBE105:
 420               	.LBE102:
 421               	.LBE101:
 422               	.LBE100:
 193:Arduino-joystick.c **** 	uint8_t ind;
 194:Arduino-joystick.c **** 	for (ind=0; ind<sizeof(joyReport); ind++) {
 195:Arduino-joystick.c **** 	    ((uint8_t *)&joyReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
 423               		.loc 1 195 0
 424 0052 4193      		st Z+,r20
 425               	.LVL25:
 194:Arduino-joystick.c **** 	    ((uint8_t *)&joyReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
 426               		.loc 1 194 0
 427 0054 9E13      		cpse r25,r30
 428 0056 00C0      		rjmp .L22
 429               	.LVL26:
 430               	.LBB107:
 431               	.LBB108:
  75:./Board/LEDs.h **** 			}
 432               		.loc 3 75 0
 433 0058 5D98      		cbi 0xb,5
 434               	.LBE108:
 435               	.LBE107:
 196:Arduino-joystick.c **** 	}
 197:Arduino-joystick.c **** 
 198:Arduino-joystick.c **** 	LEDs_TurnOnLEDs(LEDS_LED1);
 199:Arduino-joystick.c **** 	led1_ticks = LED_ON_TICKS;
 436               		.loc 1 199 0
 437 005a 80ED      		ldi r24,lo8(-48)
 438 005c 97E0      		ldi r25,lo8(7)
 439 005e 9093 0000 		sts led1_ticks+1,r25
 440 0062 8093 0000 		sts led1_ticks,r24
 441               	.LVL27:
 442               	.L20:
 443               	.LBE99:
 200:Arduino-joystick.c ****     }
 201:Arduino-joystick.c **** 
 202:Arduino-joystick.c ****     *reportp = joyReport;
 444               		.loc 1 202 0
 445 0066 88E0      		ldi r24,lo8(8)
 446 0068 E0E0      		ldi r30,lo8(joyReport)
 447 006a F0E0      		ldi r31,hi8(joyReport)
 448 006c D901      		movw r26,r18
 449               		0:
 450 006e 0190      		ld r0,Z+
 451 0070 0D92      		st X+,r0
 452 0072 8A95      		dec r24
 453 0074 01F4      		brne 0b
 203:Arduino-joystick.c **** 
 204:Arduino-joystick.c ****     *ReportSize = sizeof(joyReport);
 454               		.loc 1 204 0
 455 0076 88E0      		ldi r24,lo8(8)
 456 0078 90E0      		ldi r25,0
 457 007a F801      		movw r30,r16
 458 007c 9183      		std Z+1,r25
 459 007e 8083      		st Z,r24
 205:Arduino-joystick.c ****     return false;
 206:Arduino-joystick.c **** }
 460               		.loc 1 206 0
 461 0080 80E0      		ldi r24,0
 462               	/* epilogue start */
 463 0082 DF91      		pop r29
 464 0084 CF91      		pop r28
 465 0086 1F91      		pop r17
 466 0088 0F91      		pop r16
 467               	.LVL28:
 468 008a 0895      		ret
 469               		.cfi_endproc
 470               	.LFE93:
 472               		.section	.text.CALLBACK_HID_Device_ProcessHIDReport,"ax",@progbits
 473               	.global	CALLBACK_HID_Device_ProcessHIDReport
 475               	CALLBACK_HID_Device_ProcessHIDReport:
 476               	.LFB94:
 207:Arduino-joystick.c **** 
 208:Arduino-joystick.c **** /** HID class driver callback function for the processing of HID reports from the host.
 209:Arduino-joystick.c ****  *
 210:Arduino-joystick.c ****  *  \param[in] HIDInterfaceInfo  Pointer to the HID class interface configuration structure being r
 211:Arduino-joystick.c ****  *  \param[in] ReportID    Report ID of the received report from the host
 212:Arduino-joystick.c ****  *  \param[in] ReportType  The type of report that the host has sent, either REPORT_ITEM_TYPE_Out o
 213:Arduino-joystick.c ****  *  \param[in] ReportData  Pointer to a buffer where the created report has been stored
 214:Arduino-joystick.c ****  *  \param[in] ReportSize  Size in bytes of the received HID report
 215:Arduino-joystick.c ****  */
 216:Arduino-joystick.c **** void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
 217:Arduino-joystick.c ****                                           const uint8_t ReportID,
 218:Arduino-joystick.c ****                                           const uint8_t ReportType,
 219:Arduino-joystick.c ****                                           const void* ReportData,
 220:Arduino-joystick.c ****                                           const uint16_t ReportSize)
 221:Arduino-joystick.c **** {
 477               		.loc 1 221 0
 478               		.cfi_startproc
 479               	.LVL29:
 480               	/* prologue: function */
 481               	/* frame size = 0 */
 482               	/* stack size = 0 */
 483               	.L__stack_usage = 0
 484 0000 0895      		ret
 485               		.cfi_endproc
 486               	.LFE94:
 488               		.section	.text.__vector_23,"ax",@progbits
 489               	.global	__vector_23
 491               	__vector_23:
 492               	.LFB95:
 222:Arduino-joystick.c ****     /* Not used but must be present */
 223:Arduino-joystick.c **** }
 224:Arduino-joystick.c **** 
 225:Arduino-joystick.c **** /** ISR to manage the reception of data from the serial port, placing received bytes into a circula
 226:Arduino-joystick.c ****  *  for later transmission to the host.
 227:Arduino-joystick.c ****  */
 228:Arduino-joystick.c **** ISR(USART1_RX_vect, ISR_BLOCK)
 229:Arduino-joystick.c **** {
 493               		.loc 1 229 0
 494               		.cfi_startproc
 495               		.loc 1 229 0
 496 0000 1F92      		push r1
 497               	.LCFI6:
 498               		.cfi_def_cfa_offset 3
 499               		.cfi_offset 1, -2
 500 0002 0F92      		push r0
 501               	.LCFI7:
 502               		.cfi_def_cfa_offset 4
 503               		.cfi_offset 0, -3
 504 0004 0FB6      		in r0,__SREG__
 505 0006 0F92      		push r0
 506 0008 1124      		clr __zero_reg__
 507 000a 2F93      		push r18
 508               	.LCFI8:
 509               		.cfi_def_cfa_offset 5
 510               		.cfi_offset 18, -4
 511 000c 8F93      		push r24
 512               	.LCFI9:
 513               		.cfi_def_cfa_offset 6
 514               		.cfi_offset 24, -5
 515 000e 9F93      		push r25
 516               	.LCFI10:
 517               		.cfi_def_cfa_offset 7
 518               		.cfi_offset 25, -6
 519 0010 EF93      		push r30
 520               	.LCFI11:
 521               		.cfi_def_cfa_offset 8
 522               		.cfi_offset 30, -7
 523 0012 FF93      		push r31
 524               	.LCFI12:
 525               		.cfi_def_cfa_offset 9
 526               		.cfi_offset 31, -8
 527               	/* prologue: Signal */
 528               	/* frame size = 0 */
 529               	/* stack size = 8 */
 530               	.L__stack_usage = 8
 230:Arduino-joystick.c ****     uint8_t ReceivedByte = UDR1;
 531               		.loc 1 230 0
 532 0014 8091 CE00 		lds r24,206
 533               	.LVL30:
 231:Arduino-joystick.c **** 
 232:Arduino-joystick.c ****     if ((USB_DeviceState == DEVICE_STATE_Configured) &&
 534               		.loc 1 232 0
 535 0018 9EB3      		in r25,0x1e
 536 001a 9430      		cpi r25,lo8(4)
 537 001c 01F4      		brne .L25
 538               	.LVL31:
 539               	.LBB125:
 540               	.LBB126:
 541               	.LBB127:
 542               	.LBB128:
 111:Lib/LightweightRingBuff.h **** 			{
 543               		.loc 4 111 0
 544 001e 2FB7      		in r18,__SREG__
 545               	.LVL32:
 546               	.LBB129:
 547               	.LBB130:
  50:/opt/local/avr/include/util/atomic.h ****     return 1;
 548               		.loc 5 50 0
 549               	/* #APP */
 550               	 ;  50 "/opt/local/avr/include/util/atomic.h" 1
 551 0020 F894      		cli
 552               	 ;  0 "" 2
 553               	.LVL33:
 554               	/* #NOAPP */
 555               	.LBE130:
 556               	.LBE129:
 113:Lib/LightweightRingBuff.h **** 			}
 557               		.loc 4 113 0
 558 0022 9091 0000 		lds r25,USARTtoUSB_Buffer+132
 559               	.LVL34:
 560               	.LBB131:
 561               	.LBB132:
  70:/opt/local/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 562               		.loc 5 70 0
 563 0026 2FBF      		out __SREG__,r18
 564               		.loc 5 71 0
 565               	.LBE132:
 566               	.LBE131:
 567               	.LBE128:
 568               	.LBE127:
 569               	.LBE126:
 570               	.LBE125:
 571               		.loc 1 232 0
 572 0028 9038      		cpi r25,lo8(-128)
 573 002a 01F0      		breq .L25
 574               	.LVL35:
 575               	.LBB133:
 576               	.LBB134:
 161:Lib/LightweightRingBuff.h **** 			
 577               		.loc 4 161 0
 578 002c E091 0000 		lds r30,USARTtoUSB_Buffer+128
 579 0030 F091 0000 		lds r31,USARTtoUSB_Buffer+128+1
 580 0034 8083      		st Z,r24
 163:Lib/LightweightRingBuff.h **** 			  Buffer->In = Buffer->Buffer;
 581               		.loc 4 163 0
 582 0036 E091 0000 		lds r30,USARTtoUSB_Buffer+128
 583 003a F091 0000 		lds r31,USARTtoUSB_Buffer+128+1
 584 003e CF01      		movw r24,r30
 585               	.LVL36:
 586 0040 0196      		adiw r24,1
 587 0042 9093 0000 		sts USARTtoUSB_Buffer+128+1,r25
 588 0046 8093 0000 		sts USARTtoUSB_Buffer+128,r24
 589 004a 8050      		subi r24,lo8(USARTtoUSB_Buffer+128)
 590 004c 9040      		sbci r25,hi8(USARTtoUSB_Buffer+128)
 591               	.LVL37:
 592 004e 01F4      		brne .L29
 164:Lib/LightweightRingBuff.h **** 
 593               		.loc 4 164 0
 594 0050 80E0      		ldi r24,lo8(USARTtoUSB_Buffer)
 595 0052 90E0      		ldi r25,hi8(USARTtoUSB_Buffer)
 596 0054 9283      		std Z+2,r25
 597 0056 8183      		std Z+1,r24
 598               	.L29:
 599               	.LBB135:
 166:Lib/LightweightRingBuff.h **** 			{
 600               		.loc 4 166 0
 601 0058 9FB7      		in r25,__SREG__
 602               	.LVL38:
 603               	.LBB136:
 604               	.LBB137:
  50:/opt/local/avr/include/util/atomic.h ****     return 1;
 605               		.loc 5 50 0
 606               	/* #APP */
 607               	 ;  50 "/opt/local/avr/include/util/atomic.h" 1
 608 005a F894      		cli
 609               	 ;  0 "" 2
 610               	.LVL39:
 611               	/* #NOAPP */
 612               	.LBE137:
 613               	.LBE136:
 168:Lib/LightweightRingBuff.h **** 			}
 614               		.loc 4 168 0
 615 005c 8091 0000 		lds r24,USARTtoUSB_Buffer+132
 616 0060 8F5F      		subi r24,lo8(-(1))
 617 0062 8093 0000 		sts USARTtoUSB_Buffer+132,r24
 618               	.LVL40:
 619               	.LBB138:
 620               	.LBB139:
  70:/opt/local/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 621               		.loc 5 70 0
 622 0066 9FBF      		out __SREG__,r25
 623               		.loc 5 71 0
 624               	.LVL41:
 625               	.L25:
 626               	/* epilogue start */
 627               	.LBE139:
 628               	.LBE138:
 629               	.LBE135:
 630               	.LBE134:
 631               	.LBE133:
 233:Arduino-joystick.c **** 	    !RingBuffer_IsFull(&USARTtoUSB_Buffer)) {
 234:Arduino-joystick.c **** 	RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
 235:Arduino-joystick.c ****     }
 236:Arduino-joystick.c **** }
 632               		.loc 1 236 0
 633 0068 FF91      		pop r31
 634 006a EF91      		pop r30
 635 006c 9F91      		pop r25
 636 006e 8F91      		pop r24
 637 0070 2F91      		pop r18
 638 0072 0F90      		pop r0
 639 0074 0FBE      		out __SREG__,r0
 640 0076 0F90      		pop r0
 641 0078 1F90      		pop r1
 642 007a 1895      		reti
 643               		.cfi_endproc
 644               	.LFE95:
 646               	.global	led1_ticks
 647               		.section .bss
 650               	led1_ticks:
 651 0000 0000      		.zero	2
 652               	.global	joyReport
 655               	joyReport:
 656 0002 0000 0000 		.zero	8
 656      0000 0000 
 657               		.comm	USARTtoUSB_Buffer,133,1
 658               	.global	Joystick_HID_Interface
 659               		.data
 662               	Joystick_HID_Interface:
 663 0000 00        		.byte	0
 664 0001 01        		.byte	1
 665 0002 0800      		.word	8
 666 0004 00        		.byte	0
 667 0005 0000      		.word	PrevJoystickHIDReportBuffer
 668 0007 08        		.byte	8
 669 0008 0000 0000 		.zero	5
 669      00
 670               		.comm	PrevJoystickHIDReportBuffer,8,1
 671               		.text
 672               	.Letext0:
 673               		.file 8 "/opt/local/avr/include/stdint.h"
 674               		.file 9 "Arduino-joystick.h"
 675               		.file 10 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h"
 676               		.file 11 "../../LUFA/Drivers/USB/HighLevel/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Arduino-joystick.c
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:4      *ABS*:000000000000003f __SREG__
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:13     .text.SetupHardware:0000000000000000 SetupHardware
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:101    .text.startup.main:0000000000000000 main
                            *COM*:0000000000000085 USARTtoUSB_Buffer
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:662    .data:0000000000000000 Joystick_HID_Interface
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:650    .bss:0000000000000000 led1_ticks
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:194    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:209    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:224    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:255    .text.EVENT_USB_Device_UnhandledControlRequest:0000000000000000 EVENT_USB_Device_UnhandledControlRequest
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:274    .text.EVENT_USB_Device_StartOfFrame:0000000000000000 EVENT_USB_Device_StartOfFrame
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:305    .text.CALLBACK_HID_Device_CreateHIDReport:0000000000000000 CALLBACK_HID_Device_CreateHIDReport
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:655    .bss:0000000000000002 joyReport
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:475    .text.CALLBACK_HID_Device_ProcessHIDReport:0000000000000000 CALLBACK_HID_Device_ProcessHIDReport
/var/folders/6c/g9rchb4n5wx9ngrpwqx6t52c0000gn/T//ccGkK2pF.s:491    .text.__vector_23:0000000000000000 __vector_23
                            *COM*:0000000000000008 PrevJoystickHIDReportBuffer

UNDEFINED SYMBOLS
USB_Init
HID_Device_USBTask
USB_USBTask
HID_Device_ConfigureEndpoints
HID_Device_ProcessControlRequest
__do_copy_data
__do_clear_bss
